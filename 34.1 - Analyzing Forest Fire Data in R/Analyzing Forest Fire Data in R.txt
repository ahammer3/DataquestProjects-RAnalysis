# Analyzing Forest Fire Data Notes
This project will be the first of a few written in R to get familiar with the language. The formatting will be in an already familiar markdown style. Basic analysis and visualizations will be shown here, and for more, visit more projects in the R github repo!

## Introduction
In this quick R project, we will use different techniques, data analysis skills, and data visualization skills to work with and explore data on forest fires.

To get started, we first import the data set into an R dataframe. The dataset can be downloaded here for viewing purposes (or re-creation): https://archive.ics.uci.edu/ml/machine-learning-databases/forest-fires/

Note: Don't forget to load the readr package first. If you haven't already, you will need to install it. Other packages that are needed for this project will also be loaded in initially.

Note 2: All code in this project will be preceded and followed by a break, and also follow the {r} markdown symbol.

Note 3: Perhaps useful cheatsheet on R markdown: https://www.rstudio.com/wp-content/uploads/2015/02/rmarkdown-cheatsheet.pdf.

<br>

```{r}
## get packages
library(readr)
library(dplyr)
library(ggplot2)
library(purrr)

## read into df
forest_fires <- read_csv("forestfires.csv")
```

<br>

The data in forest_fires can now be viewed easily.

## The Importance of Forest Fire Data
Forest fires can create ecological problems and endanger human lives and property. Understanding when they occur and what causes them is important for managing them.

This data is associated with a scientific research paper on predicting the occurrence of forest fires in Portugal using modeling techniques: http://www3.dsi.uminho.pt/pcortez/fires.pdf.

Exploring data visually is often the first step data scientists take when working with new data. We take a look at the dataframe now in RStudio (you can do this easily by looking at the top left using View(df)) and see these columns:
* X: X-axis spatial coordinate within the Montesinho park map: 1 to 9
* Y: Y-axis spatial coordinate within the Montesinho park map: 2 to 9
* month: Month of the year: 'jan' to 'dec'
* day: Day of the week: 'mon' to 'sun'
* FFMC: Fine Fuel Moisture Code index from the FWI system: 18.7 to 96.20
* DMC: Duff Moisture Code index from the FWI system: 1.1 to 291.3
* DC: Drought Code index from the FWI system: 7.9 to 860.6
* ISI: Initial Spread Index from the FWI system: 0.0 to 56.10
* temp: Temperature in Celsius degrees: 2.2 to 33.30
* RH: Relative humidity in percentage: 15.0 to 100
* wind: Wind speed in km/h: 0.40 to 9.40
* rain: Outside rain in mm/m2 : 0.0 to 6.4
* area: The burned area of the forest (in ha): 0.00 to 1090.84

The X and Y variables are coordinates of fire locations. The acronym FWI stands for "fire weather index", a method used by scientists to quantify risk factors for forest fires. Other acronyms are explained pretty well and easily with a quick Google search.

## Why do Most Forest Fires Occur?
Before we get into analysis, we need to be able to understand these types of questions.

When it comes to understanding forest fires and what can be done to manage them, it is helpful to have an idea of when the fires are most likely to occur.

Looking at the data, we can try to pick out variables that help us understand when forest fires tend to occur.

There are two variables that have to do with time: month and day. These can help determine which month and days of the week most fires happen. To answer this, we can create two bar charts showing:
* One showing the number of forest fires occuring during each month
* Another showing the number of forest fires occurring on each day of the week

Since we need to count the number of fire occurrences per month or per day, it makes sense to begin by splitting the data into groups (by month or day), applying the n() function to count the number of observations in each group, and saving the resulting summary as a data frame.

<br>

```{r}
## split and group
fires_by_month <- forest_fires %>%
  group_by(month) %>%
  summarize(total_fires = n())

## plot bar
ggplot(data = fires_by_month) +
  aes(x = month, y = total_fires) +
  geom_bar(stat = "identity")  +
  theme(panel.background = element_rect(fill = "white"), 
        axis.line = element_line(size = 0.25, 
                                 colour = "black"))

## split and group
fires_by_DOW <- forest_fires %>%
  group_by(day) %>%
  summarize(total_fires = n())

## plot bar
ggplot(data = fires_by_DOW) +
  aes(x = day, y = total_fires) +
  geom_bar(stat = "identity") +
  theme(panel.background = element_rect(fill = "white"), 
        axis.line = element_line(size = 0.25, 
                                 colour = "black")) 
```

<br>

We see that the two bar charts can easily be followed once we split and group our new dataframes. This workflow should be used often.

## Working with Factor Data
These charts let you see some trends. August and September certainly have the most fires, and Wednesdays seems to have fewer fires than other days of the week.

However, let's look at the order of the month and day variables on the x-axis. Does the fact that they are not in chronological order make it hard to interpret the bar charts?

We can specify a certain order for values of these variables by changing their data type to factor (more on factors: https://www.stat.berkeley.edu/~s133/factors.html). Factor data consists of a limited number of different values, and we can specify these values' order using the argument levels = and a vector of values.

We also recall that to change the data type of a column, you can use the mutate() function from the dplyr package. For example, to change the data type of month to factor and specify the order of months, you would write (code): forest_fires <- forest_fires %>% mutate(month = factor(month, levels = c("jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec"))).

Let's make a couple new bar charts now with hte reordered variables:

<br>

```{r}
## mutate and reorder, then re-run bar code
forest_fires <- forest_fires %>%
  mutate(month = factor(month, levels = c("jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec")), 
         day = factor(day, levels = c("sun", "mon", "tue", "wed", "thu", "fri", "sat")))
```

<br>

Note: Once we have reordered the months and days of the week, we can re-run the bar chart code above to create new bar graphs! No need to write more code.

## Why do Forest Fires Occur When They do?
As we look at the new graphs, can we determine something about why forest fires occur when they do?

It's clear that August and September, late summer months in the Northern hemisphere, see more forest fires than other months.

It also looks as though Friday, Saturday, and Sunday have more forest fires than days in the middle of the week.

To explore causes of the temporal patterns of forest fire occurrence the bar charts reveal, we can look more closely at how the variables that relate to forest fires vary by month and by day of the week.

We can make box plots to visualize the distribution of the following variables by month and by day of the week:
* FFMC
* DMC
* DC
* ISI
* temp
* RH
* wind
* rain

We can also make producing multiple plots much more efficient by following these steps:
* Writing a function
* Creating vectors of variable names
* Applying the function to the variable vectors using functionals from the purrr package

Then, we'll create vectors containing names of the x and y variables and use the map2() functional to apply the functions to the vectors.

<br>

```{r}
## write the function
create_boxplots <- function(x, y) {
  ggplot(data = forest_fires) + 
    aes_string(x = x, y = y) +
    geom_boxplot() +
    theme(panel.background = element_rect(fill = "white"))
}

## assign x and y variable names 
x_var_month <- names(forest_fires)[3] ## month
x_var_day <- names(forest_fires)[4] ## day
y_var <- names(forest_fires)[5:12]

## use the map() function to apply the function to the variables of interest
month_box <- map2(x_var_month, y_var, create_boxplots) ## visualize variables by month
day_box <- map2(x_var_day, y_var, create_boxplots) ## visualize variables by day
```

<br>

Once again, adding comments to the code makes it easy to follow the three steps that were outlined. We now have proper box plots for each variable of interest.

## What Variables are Related to Forest Fire Severity?
Taking a look at the distributions of variables by day of the week, first, it's clear from looking at the solid black lines in the centers of the box plots that medians for each variable seem to be quite consistent across days of the week. The size of the boxes are also consistent across days, suggesting that the ranges of data values are similar.

The number of outlier points and the length of the box whiskers representing high and low points vary from day to day. However, there do not seem to be any patterns that suggest that the variables differ by day of the week, despite the fact that the number of forest fires appears to be higher on weekends. This is interesting.

It's also interesting to look at plot of the the rain variable. A few very high values make it so the y-axis range is large enough to make the rest of the data appear to be close to zero. We can deal with this by changing the y-axis range (adding a ylim() layer) if you wanted to see the distributions more clearly.

Taking a look at this distributions of variables by month, unlike the variable distributions by days of the week, almost all the variables display clear differences among months.

A couple of the differences are:

The temp variable shows a pattern of being higher during the summer months. We can also see that the DC variable, which stands for "drought code" and is a measure of how dry conditions are, is high during the late summer months.

We've looked at patterns of variable distributions across months and days of the week. While variables don't seem to show interesting patterns when viewed by day of the week, there are interesting differences among months that look like they have the potential to explain why more forest fires occur in the late summer months.

Now this begs the question: Which variables are related to forest fire severity?

In this data set, the area variable contains data on the number of hectares of forest that burned during the forest fire. Perhaps we can use this variable as an indicator of the severity of the fire. The idea is that worse fires will result in a larger burned area.

We can create scatter plots to see what can be learned about relationships between the area burned by a forest fire and the following variables:
* FFMC: Fine Fuel Moisture Code index from the FWI system: 18.7 to 96.20
* DMC: Duff Moisture Code index from the FWI system: 1.1 to 291.3
* DC: Drought Code index from the FWI system: 7.9 to 860.6
* ISI: Initial Spread Index from the FWI system: 0.0 to 56.10
* temp: Temperature in Celsius degrees: 2.2 to 33.30
* RH: Relative humidity in percentage: 15.0 to 100
* wind: Wind speed in km/h: 0.40 to 9.40
* rain: Outside rain in mm/m2 : 0.0 to 6.4

In this case, we're interested in whether the variables above may affect forest fire area. For that reason, area should be on the y-axes and the other variables on the x-axes of the scatter plots.

<br>

```{r}
## write the function 
create_scatterplots = function(x, y) {
  ggplot(data = forest_fires) + 
    aes_string(x = x, y = y) +
    geom_point() +
    theme(panel.background = element_rect(fill = "white"))
}

## Assign x and y variable names 
x_var_scatter <- names(forest_fires)[5:12]
y_var_scatter <- names(forest_fires)[13]

## use the map() function to apply the function to the variables of interest
scatters <- map2(x_var_scatter, y_var_scatter, create_scatterplots)
```

<br>

The format of the code was almost identical to the previous step of box plots, which will be a common theme in almost all projects! We also see that the use of creating a function again is extremely helpful in avoiding redundancy.

## Interpretation
It's time to interpret these plots!

It's hard to understand relationships between variables when we look at these plots. There are a few points representing very large values of area, and many points representing values of area that are zero or close to zero. As a result, most points are clustered around the bottom of the plots.

A histogram of the area variable values will clearly illustrate the distribution and why the scatter plots look the way they do. We will see that the area counts are heavily skewed towards 0. This says something about severity in terms of interpretation by letting us know that most areas are not that big.

## Further Analysis / Next Steps
There are a bunch of things to work on to both answer more questions and more clearly visualize the relationships that we already have. Frankly, doing it all would be both redundant and time consuming. There's always a tradeoff when it comes to "more" work, as diminishing returns is a very real thing.

This doesn't mean that there isn't more work to do though! Below we will outline some things we can quickly change in our code to see different things. These changes should be relatively easy to make and it all depends on what we want to see.

As always, specific answers to questions all depend on what a person wants to see. Figure out what an interesting question to YOU personally would be, and act on individualizing the template of code provided accordingly!

## Some Things to Consider Clearly...
To more clearly visualize relationships between variables, you can experiment with filtering the data frame by values of area and plotting subsets:
* All data except for rows with very high values of area
* All data except for rows with zero values of area
* Data with values of area that fall within a specified range

A question to consider: Do you see any interesting relationships between forest fire area and the other variables you investigated?

A question to consider if you don't: what might that tell you about our assumption that forest fire area is related to forest fire severity?

There are several more interesting things to consider if you can't find anything that jumps out right away, but you also have to be careful - you don't want to dive too deep and end up finding "patterns" that are not really there and overfitting the analysis.

## Conclusion
In this R project, we were able to import data into R, explore it by creating visualizations, and perform analyses using built-in functions, writing our own functions, and using control structures and functionals for efficiency.

These basic things are the building blocks of more complex R tools that can easily be used in RStudio. While "analyzing" this forest fire data was pretty easy, all things considered, most complex R projects are easier to follow than you think.

While we didn't really "conclude" anything in our forest fire data, this will often be the case. Unless you have a very specific analysis question, most projects will be open ended and open to interpretation, and it is really up to the researcher to display their results effectively. This is both a blessing and a curse!
